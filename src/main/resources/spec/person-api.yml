openapi: 3.0.3
info:
  title: TU Person API
  version: 1.0.0

servers:
  - url: http://localhost:8080/api/persons

tags:
  - name: person

paths:
  /{personUuid}/details/bank:
    post:
      tags:
        - person
      summary: Create bank details for a person
      operationId: postPersonDetailsBank
      parameters:
        - name: personUuid
          in: path
          description: UUID of the person
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankAccount'
      responses:
        '204':
          description: No Content
        '400':
          description: Request parameter or payload contains an invalid value.

  /{personUuid}/contacts:
    get:
      tags:
        - person
      summary: Get contacts for a person
      operationId: getPersonContacts
      parameters:
        - name: personUuid
          in: path
          description: UUID of the person
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: 'util-api.yml#/components/schemas/ContactInfo'
        '400':
          description: Request parameter or payload contains an invalid value.

    post:
      tags:
        - person
      summary: Update contacts for a person
      operationId: updatePersonContacts
      parameters:
        - name: personUuid
          in: path
          description: UUID of the person
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'util-api.yml#/components/schemas/ContactInfoUpdateRequest'
      responses:
        '204':
          description: No Content
        '400':
          description: Request parameter or payload contains an invalid value.
  /search:
    post:
      tags:
        - person
      summary: Search for persons
      operationId: searchPersons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonSearchRequest'
      responses:
        '200':
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        '400':
          description: Request parameter or payload contains an invalid value.

  /{personUuid}:
    get:
      tags:
        - person
      summary: Get information about a person
      operationId: getPersonInfo
      parameters:
        - name: personUuid
          in: path
          description: UUID of the person
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Request parameter or payload contains an invalid value.

  /{personUuid}/work:
    get:
      tags:
        - person
      summary: Get work relations for a person
      operationId: getPersonWorkRelations
      parameters:
        - name: personUuid
          in: path
          description: UUID of the person
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: 'institution-api.yml#/components/schemas/WorkRelation'
        '400':
          description: Request parameter or payload contains an invalid value.

  /{personUuid}/education:
    get:
      tags:
        - person
      summary: Get education details for a person
      operationId: getPersonEducation
      parameters:
        - name: personUuid
          in: path
          description: UUID of the person
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: 'institution-api.yml#/components/schemas/Education'
        '400':
          description: Request parameter or payload contains an invalid value.

  /{personUuid}/details:
    get:
      tags:
        - person
      summary: Get details for a person
      operationId: getPersonDetails
      parameters:
        - name: personUuid
          in: path
          description: UUID of the person
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/PersonDetails'
        '400':
          description: Request parameter or payload contains an invalid value.

  /{personUuid}/account:
    get:
      tags:
        - person
      summary: Get account information for a person
      operationId: getPersonAccountInfo
      parameters:
        - name: personUuid
          in: path
          description: UUID of the person
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/UserAccountInfo'
        '400':
          description: Request parameter or payload contains an invalid value

  /registry/validate:
    get:
      tags:
        - person-registry
      summary: Validate person registry
      operationId: validatePersonRegistry
      parameters:
        - name: params
          in: query
          description: Additional parameters for validation
          required: true
          schema:
            type: object
            properties:
              additionalProp1:
                type: string
              additionalProp2:
                type: string
              additionalProp3:
                type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HasExistingAccountResponse'
        '400':
          description: Request parameter or payload contains an invalid value.

components:
  schemas:
    BankAccount:
      type: object
      properties:
        ownerFirstName:
          type: string
          maxLength: 100
          minLength: 1
        ownerLastName:
          type: string
          maxLength: 100
          minLength: 1
        accountNumber:
          type: string
          maxLength: 34
          minLength: 10

    BankAccountUpdateRequest:
      type: object
      properties:
        ownerFirstName:
          type: string
          maxLength: 100
          minLength: 1
        ownerLastName:
          type: string
          maxLength: 100
          minLength: 1
        accountNumber:
          type: string
          maxLength: 34
          minLength: 10

    ExtendedPerson:
      type: object
      properties:
        dateOfBirth:
          type: string
        personalId:
          type: string
        person:
          $ref: '#/components/schemas/Person'

    GraphQLQuery:
      type: object
      properties:
        query:
          type: string

    HasExistingAccountResponse:
      type: object
      properties:
        canLogin:
          type: boolean
        hasAccount:
          type: boolean

    Person:
      type: object
      properties:
        firstName:
          type: string
        fullName:
          type: string
        id:
          type: integer
          format: int64
        lastName:
          type: string
        officialEmail:
          type: string
        officialFax:
          type: string
        officialMobile:
          type: string
        officialPhone:
          type: string
        personalPhone:
          type: string
        units:
          type: array
          items:
            $ref: '#/components/schemas/PersonUnitJob'
        uuid:
          type: string


    PersonDetails:
      type: object
      properties:
        bank:
          $ref: '#/components/schemas/BankAccount'
        birthplace:
          $ref: 'util-api.yml#/components/schemas/Address'
        citizenship:
          $ref: 'util-api.yml#/components/schemas/Country'
        dateOfBirth:
          type: string
        origin:
          $ref: 'util-api.yml#/components/schemas/Address'
        personalCode:
          type: string
        sex:
          $ref: 'util-api.yml#/components/schemas/Classificator'

    PersonSearchRequest:
      type: object
      properties:
        isActive:
          type: boolean
        isEmployee:
          type: boolean
        isStudent:
          type: boolean
        internal:
          type: boolean
        jobTitle:
          $ref: 'util-api.yml#/components/schemas/Translations'
        name:
          type: string
          maxLength: 40
          minLength: 2
        start:
          type: integer
          minimum: 1
        structuralUnits:
          type: array
          items:
            $ref: 'util-api.yml#/components/schemas/StructuralUnit'
        studyLevel:
          $ref: 'util-api.yml#/components/schemas/Classificator'
        studyType:
          $ref: 'util-api.yml#/components/schemas/Classificator'
        take:
          type: integer
          minimum: 1
          maximum: 300
        uuids:
          type: array
          items:
            type: string

    PersonUnitJob:
      type: object
      properties:
        jobCategory:
          $ref: 'util-api.yml#/components/schemas/Translations'
        jobTitle:
          $ref: 'util-api.yml#/components/schemas/Translations'
        structuralUnitCode:
          type: string
        structuralUnitName:
          $ref: 'util-api.yml#/components/schemas/Translations'


    UserAccountInfo:
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/UserAccountPeriod'
        emailAddresses:
          type: array
          items:
            type: string
        lastPasswordChange:
          type: string
          format: date-time
        storage:
          $ref: '#/components/schemas/UserStorage'
        username:
          type: string

    UserAccountPeriod:
      type: object
      properties:
        sinceDateTime:
          type: string
          format: date-time
        untilDateTime:
          type: string
          format: date-time
        username:
          type: string

    UserStorage:
      type: object
      properties:
        limitHardKb:
          type: integer
          format: int32
        limitSoftKb:
          type: integer
          format: int32
        usedKb:
          type: integer
          format: int32

    WorkContract:
      type: object
      properties:
        signingDate:
          type: string
          format: date
        number:
          type: string
        start:
          type: string
          format: date
        end:
          type: string
          format: date

